<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright OASIS Open 2025. All Rights Reserved. -->
<xs:schema xmlns:xacml="urn:oasis:names:tc:xacml:4.0:core:schema" xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="urn:oasis:names:tc:xacml:4.0:core:schema"
		   elementFormDefault="qualified" attributeFormDefault="unqualified" xmlns:vc="http://www.w3.org/2007/XMLSchema-versioning" vc:minVersion="1.1">

	<xs:import namespace="http://www.w3.org/XML/1998/namespace" schemaLocation="https://www.w3.org/2001/xml.xsd"/>

	<xs:element name="Request" type="xacml:RequestType">
		<xs:unique name="shortIdSetReferenceUniqueness">
			<xs:selector xpath="xacml:ShortIdSetReference"/>
			<xs:field xpath="."/>
		</xs:unique>
		<xs:unique name="requestEntityIdUniqueness">
			<xs:selector xpath="xacml:RequestEntity"/>
			<xs:field xpath="@Id"/>
		</xs:unique>
	</xs:element>
	<xs:complexType name="RequestType">
		<xs:sequence>
			<!-- Change to XACML 3.0 (issue #48): introduction of Short Identifiers (aliases for long attribute/category/datatype/combining algorithm/function/notice identifier URIs) -->
			<xs:element ref="xacml:ShortIdSetReference" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element ref="xacml:RequestDefaults" minOccurs="0"/>
			<!-- Change to XACML 3.0 (issue #18): Attributes changed to (new) RequestEntity element which is like an Entity but with a given Category and possible IncludeInResult attributes in the Attributes -->
			<xs:element ref="xacml:RequestEntity" maxOccurs="unbounded"/>
			<xs:element ref="xacml:MultiRequests" minOccurs="0"/>
		</xs:sequence>
		<!-- Change to XACML 3.0 (issue #26): ReturnPolicyIdList changed to optional with default false -->
		<xs:attribute name="ReturnPolicyIdList" type="xs:boolean" use="optional" default="false"/>
		<!-- Change to XACML 3.0 (issue #27): CombinedDecision changed to optional with default false -->
		<xs:attribute name="CombinedDecision" type="xs:boolean" use="optional" default="false"/>
	</xs:complexType>

	<xs:element name="RequestDefaults" type="xacml:RequestDefaultsType"/>
	<xs:complexType name="RequestDefaultsType">
		<xs:sequence>
			<xs:choice>
				<xs:element ref="xacml:XPathVersion"/>
			</xs:choice>
		</xs:sequence>
	</xs:complexType>

	<xs:element name="Response" type="xacml:ResponseType">
		<xs:unique name="responseShortIdSetReferenceUniqueness">
			<xs:selector xpath="xacml:ShortIdSetReference"/>
			<xs:field xpath="."/>
		</xs:unique>
	</xs:element>
	<xs:complexType name="ResponseType">
		<xs:sequence>
			<!-- Change to XACML 3.0 (issue #48): introduction of Short Identifiers (aliases for long attribute/category/datatype/function/combining algorithm identifier URIs) -->
			<xs:element ref="xacml:ShortIdSetReference" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element ref="xacml:Result" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>

	<xs:element name="Content" type="xacml:ContentType"/>
	<xs:complexType name="ContentType" mixed="true">
		<xs:sequence>
			<xs:any namespace="##any" processContents="lax"/>
		</xs:sequence>
	</xs:complexType>

	<xs:element name="Result" type="xacml:ResultType">
		<xs:unique name="resultEntityCategoryUniqueness">
			<xs:selector xpath="xacml:ResultEntity"/>
			<xs:field xpath="@Category"/>
		</xs:unique>
	</xs:element>
	<xs:complexType name="ResultType">
		<xs:sequence>
			<xs:element ref="xacml:Decision"/>
			<xs:element ref="xacml:Status" minOccurs="0"/>
			<!-- Change to XACML 3.0 (issue #6): Merged Obligation/Advice(Expression) into Notice(Expression) -->
			<xs:element ref="xacml:Notice" minOccurs="0" maxOccurs="unbounded"/>
			<!-- Change to XACML 3.0 (issue #18): Attributes element replaced with new ResultEntity element which corresponds to a RequestEntity in the Request that had IncludeInResult=true in at least one Attribute.
			Unlike RequestEntity, it does not have Content or IncludeInResult
			attributes in Attribute elements.
			 -->
			<xs:element ref="xacml:ResultEntity" minOccurs="0" maxOccurs="unbounded"/>
			<!-- Change to XACML 3.0 (Issue #16): PolicyIdentifierList removed and replaced with list of ApplicablePolicyReferences -->
			<xs:element ref="xacml:ApplicablePolicyReference" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>

	<!-- Change to XACML 3.0 (issue #18): Result's Attributes element changed to (new) ResultEntity element, which results from a RequestEntity element in the Request that had Attributes with IncludeInResult=true
	(to be included in the Result). Unlike a RequestEntity, it does not have Content or
	IncludeInResult attributes in Attribute elements.
	 -->
	<xs:element name="ResultEntity" type="xacml:ResultEntityType">
		<xs:unique name="attributeIdUniqueness">
			<xs:selector xpath="xacml:Attribute"/>
			<xs:field xpath="@Id"/>
		</xs:unique>
	</xs:element>
	<xs:complexType name="ResultEntityType">
	  <xs:sequence>
	       <xs:element ref="xacml:Attribute" minOccurs="1" maxOccurs="unbounded"/>
	  </xs:sequence>
      <!-- Change to XACML 3.0 (issue #48): Category type changed to IdentifierType for supporting Short Identifiers -->
      <xs:attribute name="Category" type="xacml:IdentifierType" use="required"/>
      <!-- Change to XACML 3.0 (issue #18): 'xml:id' replaced with 'Id' attribute to be consistently named in all XACML 4.0 / ACAL representation formats including JSON. -->
	  <xs:attribute name="Id" type="xs:ID" use="optional"/>
	</xs:complexType>

	<!-- Issue #16: PolicyIdentifierList removed, replaced in ResultType with ref to new ApplicablePolicyReference below (with maxOccurs="unbounded") -->
	<!-- Policy reference for Result's list of applicable policies -->
	<xs:element name="ApplicablePolicyReference" type="xacml:ExactMatchIdReferenceType"/>
	<!-- New IdReferenceType extension with fixed Version, to be used in Result (ApplicablePolicyReference), as opposed to PatternMatchIdReferenceType which uses Version pattern matching. -->
	<xs:complexType name="ExactMatchIdReferenceType">
			<xs:complexContent>
				<xs:extension base="xacml:IdReferenceType">
					<xs:attribute name="Version" type="xacml:VersionType" use="required"/>
				</xs:extension>
			</xs:complexContent>
	</xs:complexType>

	<xs:element name="Decision" type="xacml:DecisionType"/>
	<xs:simpleType name="DecisionType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Permit"/>
			<xs:enumeration value="Deny"/>
			<xs:enumeration value="Indeterminate"/>
			<xs:enumeration value="NotApplicable"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:element name="Status" type="xacml:StatusType"/>
	<xs:complexType name="StatusType">
		<xs:sequence>
			<xs:element ref="xacml:StatusCode"/>
			<xs:element ref="xacml:StatusMessage" minOccurs="0"/>
			<xs:element ref="xacml:StatusDetail" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>

	<xs:element name="StatusCode" type="xacml:StatusCodeType"/>
	<xs:complexType name="StatusCodeType">
		<xs:sequence>
			<xs:element ref="xacml:StatusCode" minOccurs="0"/>
		</xs:sequence>
		<!-- Change to XACML 3.0 (issue #48): Value type changed to IdentifierType for supporting Short Identifiers -->
		<xs:attribute name="Value" type="xacml:IdentifierType" use="required"/>
	</xs:complexType>

	<xs:element name="StatusMessage" type="xs:string"/>

	<xs:element name="StatusDetail" type="xacml:StatusDetailType"/>
	<xs:complexType name="StatusDetailType">
		<xs:sequence>
			<xs:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>

	<xs:element name="MissingAttributeDetail" type="xacml:MissingAttributeDetailType"/>
	<xs:complexType name="MissingAttributeDetailType">
		<xs:sequence>
			<!-- Change to XACML 3.0 (issue #18): AttributeValue replaced with Value -->
			<xs:element ref="xacml:Value" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
        <!-- Change to XACML 3.0 (issue #48): Category/AttibuteId/Datatype types changed to IdentifierType for supporting Short Identifiers -->
        <xs:attribute name="Category" type="xacml:IdentifierType" use="required"/>
		<xs:attribute name="AttributeId" type="xacml:IdentifierType" use="required"/>
		<xs:attribute name="DataType" type="xacml:IdentifierType" use="required"/>
		<!-- Change to XACML 3.0 (issue #44): Issuer type changed to xs:Name -->
		<xs:attribute name="Issuer" type="xs:Name" use="optional"/>
		<!-- Change to XACML 3.0 (issue #46): Value must not have a DataType when it is already defined at the parent level  -->
    	<xs:assert test="not(xacml:Value/@DataType)"/>
</xs:complexType>

<!--
Change to XACML 3.0 (issue #18): Attributes renamed to (new) RequestEntity which is similar to an Entity (cf. Entities Profile), except it has a given category,
and IncludeInResult is allowed in the RequestAttribute elements, therefore only to be used in a Request; as opposed to a ResultEntity
which is to be used in Results (no Content or IncludeInResult attributes).
-->
	<xs:element name="RequestEntity" type="xacml:RequestEntityType"/>
	<xs:complexType name="RequestEntityType">
		<xs:sequence>
			<xs:element ref="xacml:Content" minOccurs="0"/>
			<!-- Change to XACML 3.0 (issue #18): Attribute replaced with RequestAttribute which has 'IncludeInResult' whereas Attribute (used in Result) does not. -->
			<!-- Note: we can't use the alternative of having IncludeInResult defined in the 'Attribute' element, and add here a XSD assertion to forbid IncludeInResult <xs:assert test="not(@IncludeInResult)"/>.
			Because then we can't have a default value (e.g. false) for IncludeInResult: it would still be considered present by default (set to the default value) and the xs:assert always fail.
			-->
			<xs:element ref="xacml:RequestAttribute" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<!-- Change to XACML 3.0 (issue #48): Category type changed to IdentifierType for supporting Short Identifiers -->
		<xs:attribute name="Category" type="xacml:IdentifierType" use="required"/>
		<!-- Change to XACML 3.0 (issue #18): 'xml:id' replaced with 'Id' attribute to be consistently named in all XACML 4.0 / ACAL representation formats including JSON. -->
		<xs:attribute name="Id" type="xs:ID" use="optional"/>
	</xs:complexType>

	<xs:element name="Attribute" type="xacml:AttributeType"/>
	<xs:complexType name="AttributeType">
		<xs:sequence>
			<!-- Change to XACML 3.0 (issue #46): AttributeValue renamed to Value (not Attribute-specific anymore) -->
			<xs:element ref="xacml:Value" maxOccurs="unbounded"/>
		</xs:sequence>
		<!--
		Change to XACML 3.0 (issue #48): AttributeId type changed to IdentifierType for supporting Short Identifiers.
		Note: there has been some debate about changing 'AttributeId' to shorter name 'Id' because 'Attribute' is already in the name of the element.
		We keep 'AttributeId' for consistency with 'AttributeAssignmentExpressionType', AttributeAssignmentType (which extends
		AttributeType), MissingAttributeDetailType.
		-->
		<xs:attribute name="AttributeId" type="xacml:IdentifierType" use="required"/>
		<!-- Change to XACML 3.0 (issue #44): Issuer type changed to xs:Name -->
		<xs:attribute name="Issuer" type="xs:Name" use="optional"/>
		<!-- Change to XACML 3.0 (issue #46): new Datatype attribute taken from former AttributeValue and which applies to all Values of this attribute -->
		<xs:attribute name="DataType" type="xacml:IdentifierType" use="optional" default="http://www.w3.org/2001/XMLSchema#string"/>
		<!-- Change to XACML 3.0 (issue #46): Value must not have a DataType when it is already defined at the parent level  -->
		<xs:assert test="not(xacml:Value/@DataType)"/>
	</xs:complexType>

	<!-- Change to XACML 3.0 (issue #18): new RequestAttribute element, similar to Attribute but with extra IncludeInResult attribute to indicate whether to include it in the Result, to be used only in the Request. -->
	<xs:element name="RequestAttribute" type="xacml:RequestAttributeType"/>
	<xs:complexType name="RequestAttributeType">
		<xs:complexContent mixed="false">
			<xs:extension base="xacml:AttributeType">
				<xs:attribute name="IncludeInResult" type="xs:boolean" use="optional" default="false"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="MultiRequests" type="xacml:MultiRequestsType"/>
	<xs:complexType name="MultiRequestsType">
		<xs:sequence>
			<xs:element ref="xacml:RequestReference" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>

	<xs:element name="RequestReference" type="xacml:RequestReferenceType">
		<xs:unique name="requestEntityReferenceUniqueness">
			<xs:selector xpath="xacml:RequestEntityReference"/>
			<xs:field xpath="@Id"/>
		</xs:unique>
	</xs:element>
	<xs:complexType name="RequestReferenceType">
		<xs:sequence>
			<!-- Change to XACML 3.0 (issue #18): Attributes renamed to RequestEntity in the Request, therefore AttributesReference renamed to RequestEntityReference for consistency -->
			<xs:element ref="xacml:RequestEntityReference" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>

	<!-- Change to XACML 3.0 (issue #18): Attributes renamed to RequestEntity in the Request, therefore AttributesReference renamed to RequestEntityReference for consistency -->
	<xs:element name="RequestEntityReference" type="xacml:RequestEntityReferenceType"/>
	<xs:complexType name="RequestEntityReferenceType">
		<!-- Change to XACML 3.0 (issue #62): ReferenceId attribute renamed to Id for simplicity-->
		<xs:attribute name="Id" type="xs:IDREF" use="required"/>
	</xs:complexType>

<!-- Change to XACML 3.0 (issue #6): Merged Obligation/Advice(Expression) into Notice(Expression) -->
	<xs:element name="Notice" type="xacml:NoticeType">
		<xs:unique name="attributeAssignmentUniqueness">
			<xs:selector xpath="xacml:AttributeAssignment"/>
			<xs:field xpath="@AttributeId"/>
			<!-- Note that this does not prevent duplicate AttributeId if Category or Issuer (optional) not present -->
			<xs:field xpath="@Category"/>
			<xs:field xpath="@Issuer"/>
		</xs:unique>
	</xs:element>
	<xs:complexType name="NoticeType">
		<xs:sequence>
			<xs:element ref="xacml:AttributeAssignment" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<!-- Change to XACML 3.0 (issue #48): Id attribute type set to IdentifierType for supporting Short Identifiers -->
		<xs:attribute name="Id" type="xacml:IdentifierType" use="required"/>
		<xs:attribute name="IsObligation" type="xs:boolean" use="optional" default="false"/>
	</xs:complexType>

	<xs:element name="AttributeAssignment" type="xacml:AttributeAssignmentType"/>
	<xs:complexType name="AttributeAssignmentType">
		<xs:complexContent>
			<!-- Change to XACML 3.0 (issues #46 and #47): AttributeAssignment changed from single-valued to multi-valued, therefore becomes de facto an extension of AttributeType with an extra Category -->
			<xs:extension base="xacml:AttributeType">
				<xs:attribute name="Category" type="xacml:IdentifierType" use="optional"/>
				<!-- Change to XACML 3.0 (issue #46): Value must not have a DataType when it is already defined at the parent level  -->
				<xs:assert test="not(xacml:Value/@DataType)"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<!-- Change to XACML 3.0 (issue #6): Merged Obligation/Advice(Expression) into Notice(Expression) -->
	<xs:element name="NoticeExpression" type="xacml:NoticeExpressionType">
		<xs:unique name="attributeAssignmentExpressionUniqueness">
			<xs:selector xpath="xacml:AttributeAssignmentExpression"/>
			<xs:field xpath="@AttributeId"/>
			<!-- Note that this does not prevent duplicate AttributeId if Category or Issuer (optional) not present -->
			<xs:field xpath="@Category"/>
			<xs:field xpath="@Issuer"/>
		</xs:unique>
	</xs:element>
	<xs:complexType name="NoticeExpressionType">
		<xs:sequence>
            <xs:element ref="xacml:Condition" minOccurs="0"/>
			<xs:element ref="xacml:AttributeAssignmentExpression" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<!-- Change to XACML 3.0 (issue #48): Id attribute type changed to IdentifierType for supporting Short Identifiers -->
		<xs:attribute name="Id" type="xacml:IdentifierType" use="required"/>
		<xs:attribute name="IsObligation" type="xs:boolean" use="optional"/>
		<!-- Undefined AppliesTo means it applies to both Permit and Deny -->
		<xs:attribute name="AppliesTo" type="xacml:EffectType" use="optional"/>
	</xs:complexType>

	<xs:element name="AttributeAssignmentExpression" type="xacml:AttributeAssignmentExpressionType"/>
	<xs:complexType name="AttributeAssignmentExpressionType">
		<xs:sequence>
			<!-- Whatever Expression used here must have a clearly identifiable Datatype (Value must have a defined DataType). -->
			<xs:element ref="xacml:Expression"/>
		</xs:sequence>
		<!-- Change to XACML 3.0 (issue #48): AttributeId / Category attribute types changed to IdentifierType for supporting Short Identifiers -->
		<xs:attribute name="AttributeId" type="xacml:IdentifierType" use="required"/>
        <xs:attribute name="Category" type="xacml:IdentifierType" use="optional"/>
		<!-- Change to XACML 3.0 (issue #44): Issuer type changed to xs:Name -->
		<xs:attribute name="Issuer" type="xs:Name" use="optional"/>
		<!-- If the Expression is a Value, it must have a Datatype (in other words: either it is NOT a Value OR it is a Value with a DataType) -->
		<xs:assert test="not(xacml:Value) or xacml:Value/@DataType"/>
	</xs:complexType>

	<xs:simpleType name="EffectType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Permit"/>
			<xs:enumeration value="Deny"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:element name="PolicyIssuer" type="xacml:EntityType">
		<xs:unique name="attributeUniqueness">
			<xs:selector xpath="xacml:Attribute"/>
			<xs:field xpath="@AttributeId"/>
			<xs:field xpath="@Issuer"/>
		</xs:unique>
	</xs:element>

	<xs:complexType name="EntityType">
		<xs:sequence>
			<xs:element ref="xacml:Content" minOccurs="0"/>
			<xs:element ref="xacml:Attribute" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>

	<xs:element name="CombinerParameters" type="xacml:CombinerParametersType"/>
	<xs:complexType name="CombinerParametersType">
		<xs:sequence>
			<xs:element ref="xacml:CombinerParameter" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>

	<xs:element name="CombinerParameter" type="xacml:CombinerParameterType"/>
	<xs:complexType name="CombinerParameterType">
		<xs:sequence>
			<!-- Change to XACML 3.0 (issue #46): AttributeValue renamed to Value (not Attribute-specific anymore) -->
			<xs:element ref="xacml:Value"/>
		</xs:sequence>
		<!-- Change to XACML 3.0 (issue #61): changed ParameterName type to be more restrictive than xs:string -->
		<xs:attribute name="ParameterName" type="xacml:PolicyInternalIdentifierType" use="required"/>
		<!-- Change to XACML 3.0 (issue #46): new Datatype attribute which applies to all Values of this parameter -->
		<xs:attribute name="DataType" type="xacml:IdentifierType" use="optional" default="http://www.w3.org/2001/XMLSchema#string"/>
		<!-- Change to XACML 3.0 (issue #46): Value must not have a DataType when it is already defined at the parent level  -->
		<xs:assert test="not(xacml:Value/@DataType)"/>
	</xs:complexType>

	<!-- Change to XACML 3.0 (issue #61): Simple type for Combiner ParameterNames, and for policy-internal identifiers in general
	(whether to use it for VariableId and RuleId as well remains to be agreed with ALFA working group). -->
	<xs:simpleType name="PolicyInternalIdentifierType">
		<xs:restriction base="xs:string">
			<xs:pattern value="_?[A-Za-z]([-._]?[A-Za-z0-9]+)*"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:element name="RuleCombinerParameters" type="xacml:RuleCombinerParametersType"/>
	<xs:complexType name="RuleCombinerParametersType">
		<xs:complexContent>
			<xs:extension base="xacml:CombinerParametersType">
				<!-- Change to XACML 3.0 (issue #55 and #14): renamed RuleIdRef to RuleId -->
				<!-- Change to XACML 3.0 (issue #42): changed RuleId type to something more restrictive than xs:string
				(this is still very permissive, a more restrictive pattern remains to be agreed with ALFA working group). -->
				<xs:attribute name="RuleId" type="xs:NCName" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="PolicyCombinerParameters" type="xacml:PolicyCombinerParametersType"/>
	<xs:complexType name="PolicyCombinerParametersType">
		<xs:complexContent>
			<xs:extension base="xacml:CombinerParametersType">
				<!-- Change to XACML 3.0 (issue #55 and #14): renamed PolicyIdRef to PolicyId -->
				<xs:attribute name="PolicyId" type="xs:anyURI" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<!-- Change to XACML 3.0 - Issue #16: old PolicyIdReference Type changed to new PatternMatchIdReferenceType and element name renamed to PolicyPatternMatchReference,
	which is used only in a SAML XACMLPolicyQuery of the SAML Profile of XACML.
	 See new PolicyReference element below for policy references used in Policies -->
	<xs:element name="PolicyPatternMatchReference" type="xacml:PatternMatchIdReferenceType"/>
	<!-- Change to XACML 3.0 - Issue #16: New IdReferenceType extension with Version pattern matching, to be used in Policies (PolicyReference) and XACMLPolicyQuery (PolicyIdReference).
	Same as old PolicyIdReferenceType except the Id is now an XML attribute, cf. IdReferenceType change down below.-->
	<xs:complexType name="PatternMatchIdReferenceType">
		<xs:complexContent>
			<xs:extension base="xacml:IdReferenceType">
				<xs:attribute name="Version" type="xacml:VersionMatchType" use="optional"/>
				<xs:attribute name="EarliestVersion" type="xacml:VersionMatchType" use="optional"/>
				<xs:attribute name="LatestVersion" type="xacml:VersionMatchType" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<!-- Issue #16: Policy reference to be used inside Policies, takes optional arguments for parameterized policies -->
	<xs:element name="PolicyReference" type="xacml:PolicyReferenceType"/>
	<xs:complexType name="PolicyReferenceType">
		<xs:complexContent>
			<xs:extension base="xacml:PatternMatchIdReferenceType">
				<xs:sequence>
					<!-- Optional argument(s) to the referenced policy (parameterized policy) -->
					<xs:element ref="xacml:Expression" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="PolicyDefaults" type="xacml:DefaultsType"/>
	<xs:complexType name="DefaultsType">
		<xs:sequence>
			<xs:choice>
				<xs:element ref="xacml:XPathVersion"/>
			</xs:choice>
		</xs:sequence>
	</xs:complexType>

	<!-- Change to XACML 3.0 (issue #48): XPathVersion type changed to IdentifierType for supporting Short Identifiers -->
	<xs:element name="XPathVersion" type="xacml:IdentifierType"/>

	<!-- Issue #16: IdReferenceType URI changed to an XML attribute to allow extensions with optional attributes and arguments
	(ExactMatchIdReferenceType, PatternMatchIdReferenceType, PolicyIdReferenceType, PolicyReferenceType)  -->
	<xs:complexType name="IdReferenceType" abstract="true">
        <xs:attribute name="Id" type="xs:anyURI" use="required"/>
	</xs:complexType>

	<!-- Change to XACML 3.0 (issue #41): VersionType pattern fixed to forbid meaningless version identifiers that were previously allowed (e.g. with multiple leading / trailing zeros),
	and to get closer to Semantic Versioning -->
	<xs:simpleType name="VersionType">
		<xs:restriction base="xs:string">
			<xs:pattern value="(0|[1-9]\d*)(\.(0|[1-9]\d*)){0,3}"/>
		</xs:restriction>
	</xs:simpleType>

	<!-- Change to XACML 3.0 (issue #43): VersionMatchType pattern changed to be consistent with change to VersionType pattern (issue #41). -->
	<xs:simpleType name="VersionMatchType">
		<xs:restriction base="xs:string">
			<xs:pattern value="(0|[1-9]\d*|\*)(\.(0|[1-9]\d*|\*|\+)){0,3}"/>
		</xs:restriction>
	</xs:simpleType>

	<!-- Change to XACML 3.0 (issue #4): Parameter passed via PolicyReference to parameterized policy -->
	<xs:element name ="PolicyParameter" type="xacml:PolicyParameterType" />
	<xs:complexType name="PolicyParameterType">
		<xs:sequence>
			<!-- Parameter description -->
			<xs:element ref="xacml:Description" minOccurs="0"/>
			<!-- Default value expression (optional), i.e. that is used if no argument is passed to this parameter in the policy reference. -->
			<xs:element ref="xacml:Expression" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="ParameterName" type="xacml:PolicyInternalIdentifierType" use="required"/>
		<xs:attribute name="DataType" type="xs:anyURI" use="optional" default="http://www.w3.org/2001/XMLSchema#string"/>
		<xs:attribute name="IsBag" type="xs:boolean" use="optional" default="false"/>
	</xs:complexType>

	<xs:element name="Policy" type="xacml:PolicyType">
		<xs:unique name="policyShortIdSetReferenceUniqueness">
			<xs:selector xpath="xacml:ShortIdSetReference"/>
			<xs:field xpath="."/>
		</xs:unique>
		<xs:unique name="policyParameterNameUniqueness">
			<xs:selector xpath="xacml:PolicyParameter"/>
			<xs:field xpath="@ParameterName"/>
		</xs:unique>
		<xs:unique name="policyVariableIdUniqueness">
			<xs:selector xpath="xacml:VariableDefinition"/>
			<xs:field xpath="@VariableId"/>
		</xs:unique>
		<xs:unique name="policyIdUniqueness">
			<xs:selector xpath="xacml:Policy"/>
			<xs:field xpath="@PolicyId"/>
		</xs:unique>
		<xs:unique name="ruleIdUniqueness">
			<xs:selector xpath="xacml:Rule"/>
			<xs:field xpath="@Id"/>
		</xs:unique>
		<xs:unique name="combinerParameterNameUniqueness">
			<xs:selector xpath="xacml:CombinerParameters/xacml:CombinerParameter|xacml:PolicyCombinerParameters/xacml:CombinerParameter|xacml:RuleCombinerParameters/xacml:CombinerParameter"/>
			<xs:field xpath="@ParameterName"/>
		</xs:unique>
	</xs:element>
	<xs:complexType name="PolicyType">
		<xs:sequence>
			<!-- Change to XACML 3.0 (issue #48): introduction of Short Identifiers (aliases for long attribute/category/datatype/function/combining algorithm identifier URIs) -->
			<xs:element ref="xacml:ShortIdSetReference" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element ref="xacml:Description" minOccurs="0"/>
			<xs:element ref="xacml:PolicyIssuer" minOccurs="0"/>
			<xs:element ref="xacml:PolicyDefaults" minOccurs="0"/>
			<!-- Change to XACML 3.0 (issue #4 - Parameterized Policies): Parameters that may be passed to the Policy via PolicyReference (not to be confused with *CombinerParameters below) -->
			<xs:element ref="xacml:PolicyParameter" minOccurs="0" maxOccurs="unbounded"/>
			<!-- Change to XACML 3.0 (issue #11): VariableDefinition elements moved before the Target to allow using these variables in the Target condition  -->
			<xs:element ref="xacml:VariableDefinition" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element ref="xacml:Target" minOccurs="0"/>
			<xs:choice minOccurs="0" maxOccurs="unbounded">
				<xs:element ref="xacml:Policy"/>
				<xs:element ref="xacml:Rule"/>
				<!-- Issue #11 and #16: PolicyIdReference replaced with new PolicyReference -->
				<xs:element ref="xacml:PolicyReference"/>
				<xs:element ref="xacml:CombinerParameters"/>
				<xs:element ref="xacml:PolicyCombinerParameters"/>
				<xs:element ref="xacml:RuleCombinerParameters"/>
			</xs:choice>
			<!-- Change to XACML 3.0 (issue #6): Merged Obligation/Advice(Expression) into Notice(Expression) -->
			<xs:element ref="xacml:NoticeExpression" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="PolicyId" type="xs:anyURI" use="required"/>
		<xs:attribute name="Version" type="xacml:VersionType" use="required"/>
		<!-- Change to XACML 3.0 (issue #48): CombiningAlgId attribute type changed to IdentifierType for supporting Short Identifiers -->
		<xs:attribute name="CombiningAlgId" type="xacml:IdentifierType" use="required"/>
		<xs:attribute name="MaxDelegationDepth" type="xs:integer" use="optional"/>
	</xs:complexType>

	<xs:element name="Description" type="xs:string"/>

	<xs:element name="Rule" type="xacml:RuleType">
		<xs:unique name="ruleVariableIdUniqueness">
			<xs:selector xpath="xacml:VariableDefinition"/>
			<xs:field xpath="@VariableId"/>
		</xs:unique>
		<xs:unique name="noticeExpressionIdUniqueness">
			<xs:selector xpath="xacml:NoticeExpression"/>
			<xs:field xpath="@Id"/>
		</xs:unique>
	</xs:element>
	<xs:complexType name="RuleType">
		<xs:sequence>
			<xs:element ref="xacml:Description" minOccurs="0"/>
			<!-- Change to XACML 3.0 (issue #3): Added Variables at the Rule level -->
			<xs:element ref="xacml:VariableDefinition" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element ref="xacml:Condition" minOccurs="0"/>
			<!-- Change to XACML 3.0 (issue #6): Merged Obligation/Advice(Expression) into Notice(Expression) -->
			<xs:element ref="xacml:NoticeExpression" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<!-- Change to XACML 3.0 (issue #42): changed RuleId type to something more restrictive than xs:string
		(this is still very permissive, a more restrictive pattern remains to be agreed with ALFA working group). -->
		<!-- Change to XACML 3.0 (issue #55): renamed RuleId to Id -->
		<xs:attribute name="Id" type="xs:NCName" use="required"/>
		<xs:attribute name="Effect" type="xacml:EffectType" use="required"/>
	</xs:complexType>

	<xs:element name="Target" type="xacml:BooleanExpressionType"/>

	<xs:element name="VariableDefinition" type="xacml:VariableDefinitionType"/>
	<xs:complexType name="VariableDefinitionType">
		<xs:sequence>
			<!-- Whatever Expression used here must have a clearly identifiable Datatype (Value must have a defined DataType). -->
			<xs:element ref="xacml:Expression" />
		</xs:sequence>
		<!-- Change to XACML 3.0 (issue #42): changed VariableId type to something more restrictive than xs:string
		(this is still very permissive, a more restrictive pattern remains to be agreed with ALFA working group). -->
		<xs:attribute name="VariableId" type="xs:NCName" use="required"/>
		<!-- If the Expression is a Value, it must have a Datatype (in other words: either it is NOT a Value OR it is a Value with a DataType) -->
		<xs:assert test="not(xacml:Value) or xacml:Value/@DataType"/>
	</xs:complexType>

	<xs:element name="Expression" type="xacml:ExpressionType" abstract="true"/>
	<xs:complexType name="ExpressionType" abstract="true"/>

	<xs:element name="VariableReference" type="xacml:VariableReferenceType" substitutionGroup="xacml:Expression"/>
	<xs:complexType name="VariableReferenceType">
		<xs:complexContent>
			<xs:extension base="xacml:ExpressionType">
				<!-- Change to XACML 3.0 (issue #42): changed VariableId type to something more restrictive than xs:string
				(this is still very permissive, a more restrictive pattern remains to be agreed with ALFA working group). -->
				<xs:attribute name="VariableId" type="xs:NCName" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="AttributeSelector" type="xacml:AttributeSelectorType" substitutionGroup="xacml:Expression"/>
	<xs:complexType name="AttributeSelectorType">
		<xs:complexContent>
			<xs:extension base="xacml:ExpressionType">
				<!-- Change to XACML 3.0 (issue #48): Category attribute type changed to IdentifierType for supporting Short Identifiers -->
				<xs:attribute name="Category" type="xacml:IdentifierType" use="required"/>
				<xs:attribute name="ContextSelectorId" type="xacml:IdentifierType" use="optional"/>
				<xs:attribute name="Path" type="xs:string" use="required"/>
				<!-- Change to XACML 3.0 (issue #48): DataType attribute type changed to IdentifierType for supporting Short Identifiers -->
				<xs:attribute name="DataType" type="xacml:IdentifierType" use="optional" default="http://www.w3.org/2001/XMLSchema#string"/>
				<!-- Change to XACML 3.0 (issue #20): MustBePresent changed to optional with default false -->
				<xs:attribute name="MustBePresent" type="xs:boolean" use="optional" default="false"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="AttributeDesignator" type="xacml:AttributeDesignatorType" substitutionGroup="xacml:Expression"/>
	<xs:complexType name="AttributeDesignatorType">
		<xs:complexContent>
			<xs:extension base="xacml:ExpressionType">
				<!-- Change to XACML 3.0 (issue #48): Category / AttributeId / DataType attribute types changed to IdentifierType for supporting Short Identifiers -->
				<xs:attribute name="Category" type="xacml:IdentifierType" use="required"/>
				<xs:attribute name="AttributeId" type="xacml:IdentifierType" use="required"/>
				<xs:attribute name="DataType" type="xacml:IdentifierType" use="optional" default="http://www.w3.org/2001/XMLSchema#string"/>
				<!-- Change to XACML 3.0 (issue #44): Issuer type changed to xs:Name -->
				<xs:attribute name="Issuer" type="xs:Name" use="optional"/>
				<!-- Change to XACML 3.0 (issue #20): MustBePresent changed to optional with default false -->
				<xs:attribute name="MustBePresent" type="xs:boolean" use="optional" default="false"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<!-- Change to XACML 3.0 (issue #46): DataType attribute moved from AttributeValue to AttributeType and AttributeValue element/type replaced with more generic (not Attribute-specific) Value
	that represents an untyped value, and TypedValue.
	This simplifies the language as they are many cases where the datatype can be inferred from the context, e.g. the parent element such as the Attribute in the new definition.
	 Therefore, the DataType attribute in values can be omitted.
	This is similar to a common feature called "Type inference" in modern programming languages, although here it is much more basic.-->
	<!-- Change to XACML 3.0 (issue #46): AttributeValue renamed to Value (not Attribute-specific anymore) -->
	<xs:element name="Value" type="xacml:ValueType" substitutionGroup="xacml:Expression"/>
	<xs:complexType name="ValueType" mixed="true">
		<xs:complexContent mixed="true">
			<xs:extension base="xacml:ExpressionType">
				<xs:sequence>
					<xs:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
				<!-- Change to XACML 3.0 (issue #46): DataType changed from use=required to optional. Now only required if it cannot be inferred from the context,
				and explicitly prohibited in elements with a defined DataType at the parent level, e.g. in AttributeType -->
				<xs:attribute name="DataType" type="xacml:IdentifierType" use="optional"/>
				<xs:anyAttribute  namespace="##any" processContents="lax" />
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<!-- Change to XACML 3.0: Function re-assigned to TypedExpression substitutionGroup (which is included in the Expression one, but excludes untyped Expressions like Value). -->
	<xs:element name="Function" type="xacml:FunctionType" substitutionGroup="xacml:Expression"/>
	<xs:complexType name="FunctionType">
		<xs:complexContent>
			<xs:extension base="xacml:ExpressionType">
				<!-- Change to XACML 3.0 (issue #48): FunctionId attribute type changed to IdentifierType for supporting Short Identifiers -->
				<!-- Change to XACML 3.0 (issue #55): FunctionId attribute renamed to Id -->
				<xs:attribute name="Id" type="xacml:IdentifierType" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="Condition" type="xacml:BooleanExpressionType"/>
	<xs:complexType name="BooleanExpressionType">
		<xs:sequence>
			<xs:element ref="xacml:Expression"/>
		</xs:sequence>
	</xs:complexType>

	<!-- Change to XACML 3.0: Apply re-assigned to TypedExpression substitutionGroup (which is included in the Expression one, but excludes untyped Expressions like Value). -->
	<xs:element name="Apply" type="xacml:ApplyType" substitutionGroup="xacml:Expression"/>
	<xs:complexType name="ApplyType">
		<xs:complexContent>
			<xs:extension base="xacml:ExpressionType">
				<xs:sequence>
					<xs:element ref="xacml:Description" minOccurs="0"/>
					<!-- The datatype of each function argument here must be known from the function's definition (function signature),
					OR it must be explicitly specified by - or inferable from - the Expression (passed as argument) itself.  -->
					<xs:element ref="xacml:Expression" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
				<!-- Change to XACML 3.0 (issue #48): FunctionId attribute type changed to IdentifierType for supporting Short Identifiers -->
				<xs:attribute name="FunctionId" type="xacml:IdentifierType" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<!-- Change to XACML 3.0 (issue #48): New IdentifierType for supporting both Short Identifiers and normal URIs as attribute/category/datatype/function/notice/status code/combinining algorithm identifiers -->
	<xs:simpleType name="IdentifierType">
		<xs:restriction base="xs:string">
			<xs:pattern value="[^{}]*(\{[A-Za-z][0-9A-Za-z]*(-[0-9A-Za-z]+)*\}[^{}]*)*"/>
		</xs:restriction>
	</xs:simpleType>

	<!-- Change to XACML 3.0 (issue #48): introduction of Short Identifiers (aliases for long attribute/category/datatype/function/combining algorithm identifier URIs) -->
	<xs:element name="ShortIdSet" type="xacml:ShortIdSetType">
		<xs:unique name="shortIdNameIsUnique">
			<xs:selector xpath="xacml:ShortId"/>
			<xs:field xpath="@Name"/>
		</xs:unique>
	</xs:element>
	<xs:complexType name="ShortIdSetType">
		<xs:sequence>
			<xs:element ref="xacml:ShortIdSetReference" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element ref="xacml:ShortId" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<!-- Change to XACML 3.0 (issue #55): renamed ShortIdSetId to Id -->
		<xs:attribute name="Id" type="xs:anyURI" use="required"/>
	</xs:complexType>

	<xs:element name="ShortIdSetReference" type="xs:anyURI"/>

	<xs:element name="ShortId" type="xacml:ShortIdType"/>
	<xs:complexType name="ShortIdType">
		<xs:attribute name="Name" type="xacml:ShortIdNameType" use="required"/>
		<xs:attribute name="Value" type="xacml:ShortIdValueType" use="required"/>
	</xs:complexType>

	<xs:simpleType name="ShortIdNameType">
		<xs:restriction base="xs:string">
			<xs:pattern value="[A-Za-z][0-9A-Za-z]*(-[0-9A-Za-z]+)*"/>
				<!-- The exact pattern is still open for discussion. -->
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="ShortIdValueType">
		<xs:restriction base="xs:string">
			<xs:annotation>
				<xs:documentation xml:lang="en">
					ShortId Value type. Such value is an alternating sequence of URI characters and {ShortId}s (short identifier names enclosed in curly braces)
					(reminder: the curly brace is not a valid URI character), so the pattern is:
					^uc*(\{s\}uc*)*$
					where:
					- s is the pattern for a ShortId name, copied from the ShortIdNameType definition (which excludes curly braces):
					[A-Za-z][0-9A-Za-z]*(-[0-9A-Za-z]+)*
					- uc is the pattern for a valid URI character based on RFC 3986 (cf. the ABNF definition of 'URI' in Appendix A), which excludes curly braces:
					[!#-;=?-\[\]_a-z~]
					the minLength=1 restriction prevents the empty string, i.e. there is at least one uc or {s}.
					An XSD pattern is matched against the entire string, so the ^ and $ anchors are omitted.
				</xs:documentation>
			</xs:annotation>
			<xs:pattern value="[!#-;=?-\[\]_a-z~]*(\{[A-Za-z][0-9A-Za-z]*(-[0-9A-Za-z]+)*\}[!#-;=?-\[\]_a-z~]*)*"/>
			<xs:minLength value="1"/>
		</xs:restriction>
	</xs:simpleType>
</xs:schema>
